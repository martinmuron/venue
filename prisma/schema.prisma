// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  emailVerified DateTime?
  image         String?
  role          String   @default("user")
  company       String?
  phone         String?
  isVerified    Boolean  @default(false)
  hasVenue      Boolean  @default(false)

  accounts  Account[]
  sessions  Session[]
  favorites Favorite[]
  inquiries Inquiry[]
  venues    Venue[]   @relation("ManagedVenues")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Venue {
  id               String   @id @default(cuid())
  name             String
  slug             String   @unique
  description      String
  published        Boolean  @default(false)
  isVerified       Boolean  @default(false)
  images           String[] @default([])
  videoUrl         String?
  address          String
  latitude         Float?
  longitude        Float?
  capacitySeated   Int?
  capacityStanding Int?
  venueType        String?
  priceMin         Int?
  priceMax         Int?
  amenities        String[] @default([])
  status           String   @default("draft")

  managerId String?
  manager   User?    @relation("ManagedVenues", fields: [managerId], references: [id])

  favorites Favorite[]
  inquiries Inquiry[]
  posts     VenuePost[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Favorite {
  id      String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  venueId String
  venue   Venue  @relation(fields: [venueId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model Inquiry {
  id      String @id @default(cuid())

  userId String?
  user   User?  @relation(fields: [userId], references: [id])

  venueId String
  venue   Venue  @relation(fields: [venueId], references: [id], onDelete: Cascade)

  name    String
  email   String
  message String

  createdAt DateTime @default(now())
}

model VenuePost {
  id        String   @id @default(cuid())
  venueId   String
  venue     Venue    @relation(fields: [venueId], references: [id], onDelete: Cascade)
  imageUrl  String?
  videoUrl  String?
  caption   String?
  tags      String[] @default([])
  isPinned  Boolean  @default(false)
  createdAt DateTime @default(now())
}