// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("prostormat_accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("prostormat_sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // for credential-based auth
  phone         String?
  role          String    @default("user") // user, venue_manager, admin
  company       String?   // for event organizers
  accounts      Account[]
  sessions      Session[]
  venues        Venue[]
  eventRequests EventRequest[]
  venueInquiries VenueInquiry[]
  blogPosts     BlogPost[]
  venueBroadcasts VenueBroadcast[]
  favorites     VenueFavorite[]
  eventRequestFavorites EventRequestFavorite[]
  createdAt     DateTime  @default(now())
  
  @@map("prostormat_users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("prostormat_verification_tokens")
}

model Venue {
  id               String   @id @default(cuid())
  name             String
  slug             String   @unique
  description      String?
  address          String
  capacitySeated   Int?
  capacityStanding Int?
  venueType        String?
  amenities        String[]
  contactEmail     String?
  contactPhone     String?
  websiteUrl       String?
  images           String[]
  videoUrl         String?
  youtubeUrl       String?
  status           String   @default("draft") // draft, active, expired
  isRecommended    Boolean  @default(false) // whether this venue is recommended
  managerId        String
  subscriptionId   String?  // Stripe subscription ID
  expiresAt        DateTime?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  manager      User           @relation(fields: [managerId], references: [id])
  inquiries    VenueInquiry[]
  subscription Subscription?
  broadcastLogs VenueBroadcastLog[]
  favorites    VenueFavorite[]
  
  @@map("prostormat_venues")
}

model EventRequest {
  id                  String   @id @default(cuid())
  userId              String
  title               String
  description         String?
  eventType           String   // firemni-akce, teambuilding, svatba, soukroma-akce
  eventDate           DateTime?
  guestCount          Int?
  budgetRange         String?
  locationPreference  String?  // Praha 1, Praha 2, etc.
  requirements        String?
  contactEmail        String   // PUBLIC - for direct contact
  contactPhone        String?
  contactName         String   // PUBLIC
  status              String   @default("active") // active, closed, expired
  expiresAt           DateTime
  createdAt           DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  favorites EventRequestFavorite[]
  
  @@map("prostormat_event_requests")
}

model VenueInquiry {
  id         String    @id @default(cuid())
  venueId    String
  userId     String?   // can be null for anonymous inquiries
  name       String
  email      String
  phone      String?
  eventDate  DateTime?
  guestCount Int?
  message    String?
  createdAt  DateTime  @default(now())

  venue Venue @relation(fields: [venueId], references: [id])
  user  User? @relation(fields: [userId], references: [id])
  
  @@map("prostormat_venue_inquiries")
}

model Subscription {
  id                   String   @id @default(cuid())
  venueId              String   @unique
  stripeSubscriptionId String   @unique
  stripeCustomerId     String
  status               String   // active, canceled, past_due
  currentPeriodEnd     DateTime
  createdAt            DateTime @default(now())

  venue Venue @relation(fields: [venueId], references: [id])
  
  @@map("prostormat_subscriptions")
}

model BlogPost {
  id              String   @id @default(cuid())
  title           String
  slug            String   @unique
  excerpt         String?
  content         String
  coverImage      String?
  status          String   @default("draft") // draft, published
  authorId        String
  tags            String // JSON array
  metaTitle       String?
  metaDescription String?
  publishedAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  author User @relation(fields: [authorId], references: [id])
  
  @@map("prostormat_blog_posts")
}

model VenueBroadcast {
  id               String   @id @default(cuid())
  userId           String
  title            String
  description      String
  eventType        String   // firemni-akce, teambuilding, svatba, soukroma-akce
  eventDate        DateTime?
  guestCount       Int?
  budgetRange      String?
  locationPreference String?  // Praha 1, Praha 2, etc.
  requirements     String?
  contactEmail     String
  contactPhone     String?
  contactName      String
  sentVenues       String[] // Array of venue IDs that received the email
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  logs VenueBroadcastLog[]
  
  @@map("prostormat_venue_broadcasts")
}

model VenueBroadcastLog {
  id            String   @id @default(cuid())
  broadcastId   String
  venueId       String
  sentAt        DateTime @default(now())
  emailStatus   String   @default("sent") // sent, delivered, failed, pending, skipped
  emailError    String?  // Error message if email failed

  broadcast VenueBroadcast @relation(fields: [broadcastId], references: [id])
  venue Venue @relation(fields: [venueId], references: [id])
  
  @@map("prostormat_venue_broadcast_logs")
}

model VenueFavorite {
  id        String   @id @default(cuid())
  userId    String
  venueId   String
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  venue Venue @relation(fields: [venueId], references: [id], onDelete: Cascade)

  @@unique([userId, venueId])
  @@map("prostormat_venue_favorites")
}

model EventRequestFavorite {
  id             String   @id @default(cuid())
  userId         String
  eventRequestId String
  createdAt      DateTime @default(now())

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventRequest EventRequest @relation(fields: [eventRequestId], references: [id], onDelete: Cascade)

  @@unique([userId, eventRequestId])
  @@map("prostormat_event_request_favorites")
}